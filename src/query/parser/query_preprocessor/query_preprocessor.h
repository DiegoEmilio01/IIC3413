#pragma once

#include <variant>

#include "query/parser/grammar/autogenerated/IIC3413DBParserBaseVisitor.h"
#include "query/parser/logical_plan/expr/expr_plan.h"
#include "query/parser/logical_plan/logical_plan.h"
#include "relational_model/schema.h"

using Constant = std::variant<int64_t, std::string>;
using ColumnOrConstant = std::variant<Column, std::string, int64_t>;

class QueryPreprocessor : public IIC3413DBParserBaseVisitor {
public:
    std::unique_ptr<LogicalPlan> do_visit(IIC3413DBParser::RootContext* ctx) {
        visitRoot(ctx);
        return std::move(current_logical_plan);
    }

private:
    std::unique_ptr<LogicalPlan> current_logical_plan;

    std::unique_ptr<ExprPlan> current_expr;

    int64_t limit = INT64_MAX;

    // Alias->TableName
    std::map<std::string, std::string> from_tables;

    // Visitation helpers
    // Template because you could get it as Constant or as ColumnOrConstant
    template<typename ReturnType>
    ReturnType get_constant(IIC3413DBParser::ConstantContext*) const;

    Column get_column(IIC3413DBParser::ColumnContext*) const;

    // Parse tree visitors
    virtual std::any visitRoot(IIC3413DBParser::RootContext*) override;
    virtual std::any visitQuery(IIC3413DBParser::QueryContext*) override;

    virtual std::any visitCreateQuery(IIC3413DBParser::CreateQueryContext*) override;

    virtual std::any visitInsertQuery(IIC3413DBParser::InsertQueryContext*) override;

    virtual std::any visitSelectQuery(IIC3413DBParser::SelectQueryContext*) override;

    virtual std::any visitSelectStatement(IIC3413DBParser::SelectStatementContext*) override;

    virtual std::any visitFromStatement(IIC3413DBParser::FromStatementContext*) override;
    virtual std::any visitTableList(IIC3413DBParser::TableListContext*) override;

    virtual std::any visitWhereStatement(IIC3413DBParser::WhereStatementContext*) override;
    virtual std::any visitAndExpr(IIC3413DBParser::AndExprContext*) override;
    virtual std::any visitSimpleExpr(IIC3413DBParser::SimpleExprContext*) override;
    virtual std::any visitComparisonExpr(IIC3413DBParser::ComparisonExprContext*) override;
    virtual std::any visitLikeExpr(IIC3413DBParser::LikeExprContext*) override;
    virtual std::any visitColumnOrConstant(IIC3413DBParser::ColumnOrConstantContext*) override;
};
