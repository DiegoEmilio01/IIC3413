
// Generated from IIC3413DBLexer.g4 by ANTLR 4.13.1


#include "IIC3413DBLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct IIC3413DBLexerStaticData final {
  IIC3413DBLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  IIC3413DBLexerStaticData(const IIC3413DBLexerStaticData&) = delete;
  IIC3413DBLexerStaticData(IIC3413DBLexerStaticData&&) = delete;
  IIC3413DBLexerStaticData& operator=(const IIC3413DBLexerStaticData&) = delete;
  IIC3413DBLexerStaticData& operator=(IIC3413DBLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag iic3413dblexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
IIC3413DBLexerStaticData *iic3413dblexerLexerStaticData = nullptr;

void iic3413dblexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (iic3413dblexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(iic3413dblexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<IIC3413DBLexerStaticData>(
    std::vector<std::string>{
      "AND", "AS", "CREATE", "DISTINCT", "FROM", "INSERT", "INTO", "INT", 
      "LIKE", "LIMIT", "OR", "SELECT", "STR", "TABLE", "VALUES", "WHERE", 
      "EQ", "NE", "GT", "LT", "GE", "LE", "COMMA", "ASTERISK", "MINUS", 
      "SLASH", "PLUS", "DOT", "L_PAR", "R_PAR", "INTEGER", "STRING", "IDENTIFIER", 
      "WHITE_SPACE", "COMMENT_INPUT", "LINE_COMMENT", "UNRECOGNIZED", "ECHAR", 
      "DIGIT", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", 
      "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "','", "'*'", "'-'", 
      "'/'", "'+'", "'.'", "'('", "')'"
    },
    std::vector<std::string>{
      "", "AND", "AS", "CREATE", "DISTINCT", "FROM", "INSERT", "INTO", "INT", 
      "LIKE", "LIMIT", "OR", "SELECT", "STR", "TABLE", "VALUES", "WHERE", 
      "EQ", "NE", "GT", "LT", "GE", "LE", "COMMA", "ASTERISK", "MINUS", 
      "SLASH", "PLUS", "DOT", "L_PAR", "R_PAR", "INTEGER", "STRING", "IDENTIFIER", 
      "WHITE_SPACE", "COMMENT_INPUT", "LINE_COMMENT", "UNRECOGNIZED"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,37,395,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
  	8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
  	1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
  	1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
  	1,30,3,30,253,8,30,1,30,4,30,256,8,30,11,30,12,30,257,1,31,1,31,1,31,
  	5,31,263,8,31,10,31,12,31,266,9,31,1,31,1,31,1,32,1,32,5,32,272,8,32,
  	10,32,12,32,275,9,32,1,33,4,33,278,8,33,11,33,12,33,279,1,33,1,33,1,34,
  	1,34,1,34,1,34,5,34,288,8,34,10,34,12,34,291,9,34,1,34,1,34,1,34,1,34,
  	1,34,1,35,1,35,1,35,1,35,5,35,302,8,35,10,35,12,35,305,9,35,1,35,3,35,
  	308,8,35,1,35,5,35,311,8,35,10,35,12,35,314,9,35,1,35,3,35,317,8,35,1,
  	35,1,35,3,35,321,8,35,1,35,1,35,1,35,1,35,3,35,327,8,35,1,35,1,35,3,35,
  	331,8,35,3,35,333,8,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,
  	39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,
  	46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,
  	53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,
  	60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,289,0,65,1,1,3,2,5,
  	3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,0,77,0,
  	79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,
  	0,107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,
  	0,1,0,34,4,0,10,10,13,13,34,34,92,92,2,0,65,90,97,122,4,0,48,57,65,90,
  	95,95,97,122,3,0,9,10,13,13,32,32,2,0,9,9,32,32,2,0,10,10,13,13,8,0,34,
  	34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,0,48,57,2,0,65,
  	65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,
  	101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,
  	73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,
  	77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,
  	0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,
  	2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,
  	2,0,89,89,121,121,2,0,90,90,122,122,381,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
  	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
  	0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
  	1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
  	0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
  	0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
  	1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
  	0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,131,1,0,0,0,3,135,1,0,0,0,5,138,1,0,0,
  	0,7,145,1,0,0,0,9,154,1,0,0,0,11,159,1,0,0,0,13,166,1,0,0,0,15,171,1,
  	0,0,0,17,175,1,0,0,0,19,180,1,0,0,0,21,186,1,0,0,0,23,189,1,0,0,0,25,
  	196,1,0,0,0,27,200,1,0,0,0,29,206,1,0,0,0,31,213,1,0,0,0,33,219,1,0,0,
  	0,35,222,1,0,0,0,37,225,1,0,0,0,39,227,1,0,0,0,41,229,1,0,0,0,43,232,
  	1,0,0,0,45,235,1,0,0,0,47,237,1,0,0,0,49,239,1,0,0,0,51,241,1,0,0,0,53,
  	243,1,0,0,0,55,245,1,0,0,0,57,247,1,0,0,0,59,249,1,0,0,0,61,252,1,0,0,
  	0,63,259,1,0,0,0,65,269,1,0,0,0,67,277,1,0,0,0,69,283,1,0,0,0,71,332,
  	1,0,0,0,73,336,1,0,0,0,75,338,1,0,0,0,77,341,1,0,0,0,79,343,1,0,0,0,81,
  	345,1,0,0,0,83,347,1,0,0,0,85,349,1,0,0,0,87,351,1,0,0,0,89,353,1,0,0,
  	0,91,355,1,0,0,0,93,357,1,0,0,0,95,359,1,0,0,0,97,361,1,0,0,0,99,363,
  	1,0,0,0,101,365,1,0,0,0,103,367,1,0,0,0,105,369,1,0,0,0,107,371,1,0,0,
  	0,109,373,1,0,0,0,111,375,1,0,0,0,113,377,1,0,0,0,115,379,1,0,0,0,117,
  	381,1,0,0,0,119,383,1,0,0,0,121,385,1,0,0,0,123,387,1,0,0,0,125,389,1,
  	0,0,0,127,391,1,0,0,0,129,393,1,0,0,0,131,132,3,79,39,0,132,133,3,105,
  	52,0,133,134,3,85,42,0,134,2,1,0,0,0,135,136,3,79,39,0,136,137,3,115,
  	57,0,137,4,1,0,0,0,138,139,3,83,41,0,139,140,3,113,56,0,140,141,3,87,
  	43,0,141,142,3,79,39,0,142,143,3,117,58,0,143,144,3,87,43,0,144,6,1,0,
  	0,0,145,146,3,85,42,0,146,147,3,95,47,0,147,148,3,115,57,0,148,149,3,
  	117,58,0,149,150,3,95,47,0,150,151,3,105,52,0,151,152,3,83,41,0,152,153,
  	3,117,58,0,153,8,1,0,0,0,154,155,3,89,44,0,155,156,3,113,56,0,156,157,
  	3,107,53,0,157,158,3,103,51,0,158,10,1,0,0,0,159,160,3,95,47,0,160,161,
  	3,105,52,0,161,162,3,115,57,0,162,163,3,87,43,0,163,164,3,113,56,0,164,
  	165,3,117,58,0,165,12,1,0,0,0,166,167,3,95,47,0,167,168,3,105,52,0,168,
  	169,3,117,58,0,169,170,3,107,53,0,170,14,1,0,0,0,171,172,3,95,47,0,172,
  	173,3,105,52,0,173,174,3,117,58,0,174,16,1,0,0,0,175,176,3,101,50,0,176,
  	177,3,95,47,0,177,178,3,99,49,0,178,179,3,87,43,0,179,18,1,0,0,0,180,
  	181,3,101,50,0,181,182,3,95,47,0,182,183,3,103,51,0,183,184,3,95,47,0,
  	184,185,3,117,58,0,185,20,1,0,0,0,186,187,3,107,53,0,187,188,3,113,56,
  	0,188,22,1,0,0,0,189,190,3,115,57,0,190,191,3,87,43,0,191,192,3,101,50,
  	0,192,193,3,87,43,0,193,194,3,83,41,0,194,195,3,117,58,0,195,24,1,0,0,
  	0,196,197,3,115,57,0,197,198,3,117,58,0,198,199,3,113,56,0,199,26,1,0,
  	0,0,200,201,3,117,58,0,201,202,3,79,39,0,202,203,3,81,40,0,203,204,3,
  	101,50,0,204,205,3,87,43,0,205,28,1,0,0,0,206,207,3,121,60,0,207,208,
  	3,79,39,0,208,209,3,101,50,0,209,210,3,119,59,0,210,211,3,87,43,0,211,
  	212,3,115,57,0,212,30,1,0,0,0,213,214,3,123,61,0,214,215,3,93,46,0,215,
  	216,3,87,43,0,216,217,3,113,56,0,217,218,3,87,43,0,218,32,1,0,0,0,219,
  	220,5,61,0,0,220,221,5,61,0,0,221,34,1,0,0,0,222,223,5,33,0,0,223,224,
  	5,61,0,0,224,36,1,0,0,0,225,226,5,62,0,0,226,38,1,0,0,0,227,228,5,60,
  	0,0,228,40,1,0,0,0,229,230,5,62,0,0,230,231,5,61,0,0,231,42,1,0,0,0,232,
  	233,5,60,0,0,233,234,5,61,0,0,234,44,1,0,0,0,235,236,5,44,0,0,236,46,
  	1,0,0,0,237,238,5,42,0,0,238,48,1,0,0,0,239,240,5,45,0,0,240,50,1,0,0,
  	0,241,242,5,47,0,0,242,52,1,0,0,0,243,244,5,43,0,0,244,54,1,0,0,0,245,
  	246,5,46,0,0,246,56,1,0,0,0,247,248,5,40,0,0,248,58,1,0,0,0,249,250,5,
  	41,0,0,250,60,1,0,0,0,251,253,3,49,24,0,252,251,1,0,0,0,252,253,1,0,0,
  	0,253,255,1,0,0,0,254,256,3,77,38,0,255,254,1,0,0,0,256,257,1,0,0,0,257,
  	255,1,0,0,0,257,258,1,0,0,0,258,62,1,0,0,0,259,264,5,34,0,0,260,263,8,
  	0,0,0,261,263,3,75,37,0,262,260,1,0,0,0,262,261,1,0,0,0,263,266,1,0,0,
  	0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,
  	268,5,34,0,0,268,64,1,0,0,0,269,273,7,1,0,0,270,272,7,2,0,0,271,270,1,
  	0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,66,1,0,0,0,
  	275,273,1,0,0,0,276,278,7,3,0,0,277,276,1,0,0,0,278,279,1,0,0,0,279,277,
  	1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,282,6,33,0,0,282,68,1,0,0,
  	0,283,284,5,47,0,0,284,285,5,42,0,0,285,289,1,0,0,0,286,288,9,0,0,0,287,
  	286,1,0,0,0,288,291,1,0,0,0,289,290,1,0,0,0,289,287,1,0,0,0,290,292,1,
  	0,0,0,291,289,1,0,0,0,292,293,5,42,0,0,293,294,5,47,0,0,294,295,1,0,0,
  	0,295,296,6,34,1,0,296,70,1,0,0,0,297,298,5,45,0,0,298,299,5,45,0,0,299,
  	303,1,0,0,0,300,302,7,4,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,
  	0,0,0,303,304,1,0,0,0,304,308,1,0,0,0,305,303,1,0,0,0,306,308,5,35,0,
  	0,307,297,1,0,0,0,307,306,1,0,0,0,308,312,1,0,0,0,309,311,8,5,0,0,310,
  	309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,320,1,
  	0,0,0,314,312,1,0,0,0,315,317,5,13,0,0,316,315,1,0,0,0,316,317,1,0,0,
  	0,317,318,1,0,0,0,318,321,5,10,0,0,319,321,5,0,0,1,320,316,1,0,0,0,320,
  	319,1,0,0,0,321,333,1,0,0,0,322,323,5,45,0,0,323,324,5,45,0,0,324,330,
  	1,0,0,0,325,327,5,13,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,328,1,0,
  	0,0,328,331,5,10,0,0,329,331,5,0,0,1,330,326,1,0,0,0,330,329,1,0,0,0,
  	331,333,1,0,0,0,332,307,1,0,0,0,332,322,1,0,0,0,333,334,1,0,0,0,334,335,
  	6,35,1,0,335,72,1,0,0,0,336,337,9,0,0,0,337,74,1,0,0,0,338,339,5,92,0,
  	0,339,340,7,6,0,0,340,76,1,0,0,0,341,342,7,7,0,0,342,78,1,0,0,0,343,344,
  	7,8,0,0,344,80,1,0,0,0,345,346,7,9,0,0,346,82,1,0,0,0,347,348,7,10,0,
  	0,348,84,1,0,0,0,349,350,7,11,0,0,350,86,1,0,0,0,351,352,7,12,0,0,352,
  	88,1,0,0,0,353,354,7,13,0,0,354,90,1,0,0,0,355,356,7,14,0,0,356,92,1,
  	0,0,0,357,358,7,15,0,0,358,94,1,0,0,0,359,360,7,16,0,0,360,96,1,0,0,0,
  	361,362,7,17,0,0,362,98,1,0,0,0,363,364,7,18,0,0,364,100,1,0,0,0,365,
  	366,7,19,0,0,366,102,1,0,0,0,367,368,7,20,0,0,368,104,1,0,0,0,369,370,
  	7,21,0,0,370,106,1,0,0,0,371,372,7,22,0,0,372,108,1,0,0,0,373,374,7,23,
  	0,0,374,110,1,0,0,0,375,376,7,24,0,0,376,112,1,0,0,0,377,378,7,25,0,0,
  	378,114,1,0,0,0,379,380,7,26,0,0,380,116,1,0,0,0,381,382,7,27,0,0,382,
  	118,1,0,0,0,383,384,7,28,0,0,384,120,1,0,0,0,385,386,7,29,0,0,386,122,
  	1,0,0,0,387,388,7,30,0,0,388,124,1,0,0,0,389,390,7,31,0,0,390,126,1,0,
  	0,0,391,392,7,32,0,0,392,128,1,0,0,0,393,394,7,33,0,0,394,130,1,0,0,0,
  	16,0,252,257,262,264,273,279,289,303,307,312,316,320,326,330,332,2,0,
  	2,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  iic3413dblexerLexerStaticData = staticData.release();
}

}

IIC3413DBLexer::IIC3413DBLexer(CharStream *input) : Lexer(input) {
  IIC3413DBLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *iic3413dblexerLexerStaticData->atn, iic3413dblexerLexerStaticData->decisionToDFA, iic3413dblexerLexerStaticData->sharedContextCache);
}

IIC3413DBLexer::~IIC3413DBLexer() {
  delete _interpreter;
}

std::string IIC3413DBLexer::getGrammarFileName() const {
  return "IIC3413DBLexer.g4";
}

const std::vector<std::string>& IIC3413DBLexer::getRuleNames() const {
  return iic3413dblexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& IIC3413DBLexer::getChannelNames() const {
  return iic3413dblexerLexerStaticData->channelNames;
}

const std::vector<std::string>& IIC3413DBLexer::getModeNames() const {
  return iic3413dblexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& IIC3413DBLexer::getVocabulary() const {
  return iic3413dblexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView IIC3413DBLexer::getSerializedATN() const {
  return iic3413dblexerLexerStaticData->serializedATN;
}

const atn::ATN& IIC3413DBLexer::getATN() const {
  return *iic3413dblexerLexerStaticData->atn;
}




void IIC3413DBLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  iic3413dblexerLexerInitialize();
#else
  ::antlr4::internal::call_once(iic3413dblexerLexerOnceFlag, iic3413dblexerLexerInitialize);
#endif
}
